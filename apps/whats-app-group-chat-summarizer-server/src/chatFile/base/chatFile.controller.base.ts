/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatFileService } from "../chatFile.service";
import { ChatFileCreateInput } from "./ChatFileCreateInput";
import { ChatFile } from "./ChatFile";
import { ChatFileFindManyArgs } from "./ChatFileFindManyArgs";
import { ChatFileWhereUniqueInput } from "./ChatFileWhereUniqueInput";
import { ChatFileUpdateInput } from "./ChatFileUpdateInput";
import { ChatMessageFindManyArgs } from "../../chatMessage/base/ChatMessageFindManyArgs";
import { ChatMessage } from "../../chatMessage/base/ChatMessage";
import { ChatMessageWhereUniqueInput } from "../../chatMessage/base/ChatMessageWhereUniqueInput";
import { SummaryFindManyArgs } from "../../summary/base/SummaryFindManyArgs";
import { Summary } from "../../summary/base/Summary";
import { SummaryWhereUniqueInput } from "../../summary/base/SummaryWhereUniqueInput";

export class ChatFileControllerBase {
  constructor(protected readonly service: ChatFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatFile })
  async createChatFile(
    @common.Body() data: ChatFileCreateInput
  ): Promise<ChatFile> {
    return await this.service.createChatFile({
      data: data,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatFile] })
  @ApiNestedQuery(ChatFileFindManyArgs)
  async chatFiles(@common.Req() request: Request): Promise<ChatFile[]> {
    const args = plainToClass(ChatFileFindManyArgs, request.query);
    return this.service.chatFiles({
      ...args,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatFile(
    @common.Param() params: ChatFileWhereUniqueInput
  ): Promise<ChatFile | null> {
    const result = await this.service.chatFile({
      where: params,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatFile(
    @common.Param() params: ChatFileWhereUniqueInput,
    @common.Body() data: ChatFileUpdateInput
  ): Promise<ChatFile | null> {
    try {
      return await this.service.updateChatFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileContent: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatFile(
    @common.Param() params: ChatFileWhereUniqueInput
  ): Promise<ChatFile | null> {
    try {
      return await this.service.deleteChatFile({
        where: params,
        select: {
          createdAt: true,
          fileContent: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/chatMessages")
  @ApiNestedQuery(ChatMessageFindManyArgs)
  async findChatMessages(
    @common.Req() request: Request,
    @common.Param() params: ChatFileWhereUniqueInput
  ): Promise<ChatMessage[]> {
    const query = plainToClass(ChatMessageFindManyArgs, request.query);
    const results = await this.service.findChatMessages(params.id, {
      ...query,
      select: {
        chatFile: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        messageText: true,
        sender: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/chatMessages")
  async connectChatMessages(
    @common.Param() params: ChatFileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        connect: body,
      },
    };
    await this.service.updateChatFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/chatMessages")
  async updateChatMessages(
    @common.Param() params: ChatFileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        set: body,
      },
    };
    await this.service.updateChatFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/chatMessages")
  async disconnectChatMessages(
    @common.Param() params: ChatFileWhereUniqueInput,
    @common.Body() body: ChatMessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      chatMessages: {
        disconnect: body,
      },
    };
    await this.service.updateChatFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/summaries")
  @ApiNestedQuery(SummaryFindManyArgs)
  async findSummaries(
    @common.Req() request: Request,
    @common.Param() params: ChatFileWhereUniqueInput
  ): Promise<Summary[]> {
    const query = plainToClass(SummaryFindManyArgs, request.query);
    const results = await this.service.findSummaries(params.id, {
      ...query,
      select: {
        chatFile: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        summaryText: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/summaries")
  async connectSummaries(
    @common.Param() params: ChatFileWhereUniqueInput,
    @common.Body() body: SummaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      summaries: {
        connect: body,
      },
    };
    await this.service.updateChatFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/summaries")
  async updateSummaries(
    @common.Param() params: ChatFileWhereUniqueInput,
    @common.Body() body: SummaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      summaries: {
        set: body,
      },
    };
    await this.service.updateChatFile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/summaries")
  async disconnectSummaries(
    @common.Param() params: ChatFileWhereUniqueInput,
    @common.Body() body: SummaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      summaries: {
        disconnect: body,
      },
    };
    await this.service.updateChatFile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
