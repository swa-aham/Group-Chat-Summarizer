/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ChatFile as PrismaChatFile,
  ChatMessage as PrismaChatMessage,
  Summary as PrismaSummary,
} from "@prisma/client";

export class ChatFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ChatFileCountArgs, "select">): Promise<number> {
    return this.prisma.chatFile.count(args);
  }

  async chatFiles<T extends Prisma.ChatFileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatFileFindManyArgs>
  ): Promise<PrismaChatFile[]> {
    return this.prisma.chatFile.findMany<Prisma.ChatFileFindManyArgs>(args);
  }
  async chatFile<T extends Prisma.ChatFileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatFileFindUniqueArgs>
  ): Promise<PrismaChatFile | null> {
    return this.prisma.chatFile.findUnique(args);
  }
  async createChatFile<T extends Prisma.ChatFileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatFileCreateArgs>
  ): Promise<PrismaChatFile> {
    return this.prisma.chatFile.create<T>(args);
  }
  async updateChatFile<T extends Prisma.ChatFileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatFileUpdateArgs>
  ): Promise<PrismaChatFile> {
    return this.prisma.chatFile.update<T>(args);
  }
  async deleteChatFile<T extends Prisma.ChatFileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatFileDeleteArgs>
  ): Promise<PrismaChatFile> {
    return this.prisma.chatFile.delete(args);
  }

  async findChatMessages(
    parentId: string,
    args: Prisma.ChatMessageFindManyArgs
  ): Promise<PrismaChatMessage[]> {
    return this.prisma.chatFile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chatMessages(args);
  }

  async findSummaries(
    parentId: string,
    args: Prisma.SummaryFindManyArgs
  ): Promise<PrismaSummary[]> {
    return this.prisma.chatFile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .summaries(args);
  }
}
