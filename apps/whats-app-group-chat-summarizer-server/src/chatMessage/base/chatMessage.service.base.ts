/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChatMessage as PrismaChatMessage,
  ChatFile as PrismaChatFile,
} from "@prisma/client";

export class ChatMessageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatMessageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatMessage.count(args);
  }

  async chatMessages<T extends Prisma.ChatMessageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatMessageFindManyArgs>
  ): Promise<PrismaChatMessage[]> {
    return this.prisma.chatMessage.findMany<Prisma.ChatMessageFindManyArgs>(
      args
    );
  }
  async chatMessage<T extends Prisma.ChatMessageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatMessageFindUniqueArgs>
  ): Promise<PrismaChatMessage | null> {
    return this.prisma.chatMessage.findUnique(args);
  }
  async createChatMessage<T extends Prisma.ChatMessageCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatMessageCreateArgs>
  ): Promise<PrismaChatMessage> {
    return this.prisma.chatMessage.create<T>(args);
  }
  async updateChatMessage<T extends Prisma.ChatMessageUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatMessageUpdateArgs>
  ): Promise<PrismaChatMessage> {
    return this.prisma.chatMessage.update<T>(args);
  }
  async deleteChatMessage<T extends Prisma.ChatMessageDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChatMessageDeleteArgs>
  ): Promise<PrismaChatMessage> {
    return this.prisma.chatMessage.delete(args);
  }

  async getChatFile(parentId: string): Promise<PrismaChatFile | null> {
    return this.prisma.chatMessage
      .findUnique({
        where: { id: parentId },
      })
      .chatFile();
  }
}
